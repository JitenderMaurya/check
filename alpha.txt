import time
from llama_index.core.node_parser.relational.markdown_element import MarkdownElementNodeParser
from llama_parse import LlamaParse
llamaparse_key = 
import re
import anthropic
import json
import httpx
import re
client = anthropic.Anthropic(api_key="sk-ant-api03-MTJQgC3-5EaQ6vRqs4tSA3kmVeaeHcmmNS1nFkvQObj90QTwIkP3ZpdhHDA3_-Q8JJI8j1B45wW33DbQUZdelQ", http_client=httpx.Client(verify=False))

pdfpath = "/home/test/jitender/financial-insights-main/financial-insights-main/Ryanair-2024-Annual-Report.pdf"
#out = extract_text_from_pdf_llamaparse(pdfpath,240)
parse_instructions = f'''
    The provided document is document. 
    It contains detailed financial information, management discussion, key performance metrics, 
    and many tables summarizing data. 
    Separate text and tables clearly in the output. For the text, create a markdown section heading like '## Text Section 1' 
    for each distinct text section. For each table, add a markdown table heading like '## Table 1: [Table Name]' before the table. 
    Ensure that text and tables are clearly distinguishable.
    '''
parser = LlamaParse(
    api_key=llamaparse_key,  # can also be set in your env as LLAMA_CLOUD_API_KEY
    result_type="markdown",  # "markdown" and "text" are available
    parsing_instruction = parse_instructions,
    #target_pages=output_pages,
    num_workers = 8,
    verbose=True)

parsed_data_original = parser.load_data(pdfpath)

#.......................................................................MIne.................................
import nest_asyncio
from llama_parse import LlamaParse
from llama_index.core import SimpleDirectoryReader

# Allow async operations in environments like Jupyter
nest_asyncio.apply()

# Your LlamaParse API key
#llamaparse_key = llamaparse_key

# Refined parser
parser = LlamaParse(
    api_key=llamaparse_key,
    result_type="markdown",  # preserves text and tables well
    verbose=True,
    parse_mode="parse_page_with_layout_agent",
    user_prompt=(
    "You are parsing a detailed financial report containing management discussions, financial statements, and tabular data. "
    "For the text, create a markdown section heading like '## Text Section 1' for each distinct text section. For each table, add a markdown table heading like '## Table 1: [Table Name]' before the table."
    "Follow these strict instructions for high-quality structured extraction:\n\n"

    "**General Instructions:**\n"
    "- Do NOT parse or include any images, logos, charts, or image captions.\n"
    "- Ignore footers, page numbers, and repeated headers unless they provide unique, meaningful content.\n\n"
    "- Always maintain clear currency and date."
    "- Dont add any additional information or comments that are not present in the document.\n\n"

    "**Text Parsing:**\n"
    "- Parse all textual sections clearly and fully.\n"
    "- If the page uses a two-column layout, **first parse the left column top-to-bottom, then the right column top-to-bottom**.\n"
    "- Do NOT alternate between columns while parsing.\n"
    "- Use markdown headers like `## Text Section: [Section Title]` for Text sections.\n\n"

    "**Table Parsing:**\n"
    "- Tables may not always be enclosed with lines — identify such cases based on structure and spacing. Make sure Format table in proper table format with separating values using **|** or **_** in verticaly and horizontally\n"
    "- Ensure all tables are parsed **clearly, with correct alignment, column headers, subheaders, and footnotes**.\n"
    "- Mention any currency units present in the table (e.g., USD, EUR, INR). very clearly\n"
    "- Use markdown headers like `## Table: [Table Description]` before each table. The description related to the table must be clear as it is. \n\n"

    "Output must be in well-structured markdown format, cleanly separating text and tables."
)
)

# Load PDF
file_path = "/home/test/jitender/financial-insights-main/financial-insights-main/polymed_annual_report.pdf"
pdf_path = "/home/test/jitender/financial-insights-main/financial-insights-main/financial_report_rotated1.pdf"
#AIR ARABIA PJSC AND ITS SUBSIDIARIES DEC 2022
documents = parser.load_data(pdf_path)  # or use await parser.aload_data(path) if you're async

# Inspect output
for doc in documents:
    #print(f"\n=== Page {doc.metadata.get('page_label')} ===\n")
    print(doc.text)
#..................................................................................................................
Scanned PDF
from pdf2image import convert_from_path
from PIL import Image
import pytesseract
import img2pdf
from io import BytesIO

pdf_path = "/home/test/jitender/financial-insights-main/financial-insights-main/SNB-English-YE-2024-Financials-Final.pdf"
images = convert_from_path(pdf_path)

image_bytes_list = []
print(type(images))
for i, img in enumerate(images):
    # Detect orientation using Tesseract
    osd = pytesseract.image_to_osd(img)
    rotation_angle = 0
    for line in osd.splitlines():
        if "Rotate" in line:
            rotation_angle = int(line.split(":")[1].strip())
            break

    # Rotate image if needed
    if rotation_angle == 90:
        img = img.rotate(-90, expand=True)
    elif rotation_angle == 270:
        img = img.rotate(90, expand=True)
    elif rotation_angle == 180:
        img = img.rotate(180, expand=True)

    # Save image to memory
    img_byte = BytesIO()
    img.save(img_byte, format="JPEG")
    img_byte.seek(0)
    image_bytes_list.append(img_byte)

# Convert all in-memory images to a single PDF
with open("SNB-English-YE-2024-Financials-Final_corrected.pdf", "wb") as f:
    f.write(img2pdf.convert(image_bytes_list))
#..................................................................................................

import fitz  # PyMuPDF
import pdb
def get_longest_words(page, top_n=5):
    words = page.get_text("words")  # (x0, y0, x1, y1, word, block_no, line_no, word_no)
    out = page.get_text("dict")
    #pdb.set_trace()
    no_rot =0
    left_rot =0
    right_rot =0
    print('len--', len(out['blocks']))
    if len(out['blocks'])==0:
        return 0
    mid_sec = int(len(out['blocks'])/2)
    if 'lines' in list(out['blocks'][mid_sec].keys()):
        word_length = len(out['blocks'][mid_sec]['lines'])
    else:
        word_length = 0
    mx_len = min(20, word_length)
    for i in range(mx_len):
        dir = out['blocks'][mid_sec]['lines'][i]['dir']
        if dir==(1.0,0.0):
            no_rot+=1
        elif dir==(0.0,1.0):
            left_rot+=1
        elif dir==(0.0,-1.0):
            right_rot+=1
    mx_val = max(no_rot,left_rot,right_rot)
    if mx_val==no_rot:
        return 0
    elif mx_val==left_rot:
        return -90
    else:
        return 90

def determine_rotation(words):
    vertical_up = 0
    vertical_down = 0
    horizontal = 0

    for word in words:
        x0, y0, x1, y1 = word[:4]
        dx = x1 - x0
        dy = y1 - y0

        if abs(dy) > abs(dx):  # Vertical orientation
            if dy > 0:
                vertical_down += 1  # Top to bottom → rotated 90°
            else:
                vertical_up += 1    # Bottom to top → rotated -90°
        else:
            horizontal += 1

    if vertical_down > vertical_up and vertical_down > horizontal:
        return -90  # Rotate counter-clockwise to fix 90° rotation
    elif vertical_up > vertical_down and vertical_up > horizontal:
        return 90   # Rotate clockwise to fix -90° rotation
    else:
        return 0    # No rotation needed

def rotate_pdf_based_on_text_orientation(input_pdf, output_pdf):
    doc = fitz.open(input_pdf)
    for i, page in enumerate(doc):
        #longest_words = get_longest_words(page)
        
        rotation = get_longest_words(page)
        print(i,'-->', rotation)
        if rotation != 0:
            page.set_rotation((page.rotation + rotation) % 360)
            print(f"Rotated page {i + 1} by {rotation} degrees.")
    doc.save(output_pdf)
    doc.close()
    print(f"Saved rotated PDF as: {output_pdf}")

# Example usage
input_pdf_path = "/home/test/jitender/financial-insights-main/financial-insights-main/SNB-English-YE-2024-Financials-Final.pdf"
output_pdf_path = "SNB_rotated.pdf"
rotate_pdf_based_on_text_orientation(input_pdf_path, output_pdf_path)

#46[(237.41261291503906, 756.2666625976562, 245.21922302246094, 809.2857055664062, '(Taxonomy-aligned)', 11, 1, 0), (261.3501281738281, 757.4255981445312, 269.15673828125, 809.2857055664062, '(Taxonomy-aligned)', 12, 1, 0), (209.9453582763672, 753.59228515625, 217.75196838378906, 802.3221435546875, 'Taxonomy-eligible', 10, 0, 1), (322.573486328125, 750.2413940429688, 330.3800964355469, 798.9747314453125, 'Taxonomy-eligible', 15, 0, 1), (394.3860778808594, 730.8330688476562, 402.19268798828125, 778.1456909179688, 'Taxonomy-eligible', 18, 0, 2)]
#47[(346.0103454589844, 49.2236328125, 353.81695556640625, 102.2457275390625, '(Taxonomy-aligned)', 11, 1, 0), (322.1551818847656, 49.2236328125, 329.9617919921875, 101.08386993408203, '(Taxonomy-aligned)', 12, 1, 0), (373.3952331542969, 56.18719482421875, 381.20184326171875, 104.91714477539062, 'Taxonomy-eligible', 10, 0, 1), (261.1789245605469, 59.53472900390625, 268.98553466796875, 108.26815795898438, 'Taxonomy-eligible', 15, 0, 1), (189.61343383789062, 73.97979736328125, 197.4200439453125, 121.29255676269531, 'Taxonomy-eligible', 18, 0, 2)]





#............................................................








[04/07, 4:20 pm] Yahya El Ali: https://www.alahli.com/-/media/project/snb/snb-web/about-us/02-1-investor-relations/financial-information/financial-statements/english/SNB-English-YE-2024-Financials-Final.pdf?view=1
[04/07, 4:21 pm] Yahya El Ali: https://s29.q4cdn.com/310188824/files/doc_financials/2024/ar/TMUS-2024-Annual-Report.pdf
[04/07, 4:22 pm] Yahya El Ali: https://reports.investors.vodafone.com/view/197179846/
[04/07, 4:23 pm] Yahya El Ali: https://www.aramco.com/-/media/publications/corporate-reports/reports-and-presentations/2023/fy/saudi-aramco-fy-2023-full-financials-english.pdf
[04/07, 4:24 pm] Yahya El Ali: https://marriott.gcs-web.com/static-files/b82978a6-9d28-4e38-9855-fc4ae2cebe11
[04/07, 4:25 pm] Yahya El Ali: https://www.airfranceklm.com/sites/default/files/2025-03/2024.12-consolidated-financial-statements-and-notes-afkl-as-of-december-31-2024.pdf
[04/07, 4:29 pm] Yahya El Ali: https://www.marshmclennan.com/web-assets/files-for-download/investors/2025/pdf-2024-marsh-mclennan-investors-annual-report.pdf
[04/07, 4:29 pm] Yahya El Ali: https://c.ekstatic.net/ecl/documents/annual-report/2024-2025.pdf
[04/07, 4:31 pm] Yahya El Ali: Those are eight financial statements which are not easy to test as we discussed!
curl -X 'POST' \
  'https://www.py.pitchfit.ai/modeling/compute_user_base' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{"formula":{"Step 1: Identify the size of the population in scope":["UK_Europe_Working_Age_Population = UK_and_Europe_Total_Population * Working_Age_Population_Percentage / 100","Middle_East_Africa_Working_Age_Population = Middle_East_and_Africa_Total_Population * Working_Age_Population_Percentage / 100","Indian_Subcontinent_Working_Age_Population = Indian_Subcontinent_Total_Population * Working_Age_Population_Percentage / 100","UK_Europe_High_Income_Segment = UK_Europe_Working_Age_Population * UK_Europe_High_Income_Share_Percentage / 100","UK_Europe_Mid_Income_Segment = UK_Europe_Working_Age_Population * UK_Europe_Mid_Income_Share_Percentage / 100","UK_Europe_Low_Income_Segment = UK_Europe_Working_Age_Population * UK_Europe_Low_Income_Share_Percentage / 100","Middle_East_Africa_High_Income_Segment = Middle_East_Africa_Working_Age_Population * Middle_East_Africa_High_Income_Share_Percentage / 100","Middle_East_Africa_Mid_Income_Segment = Middle_East_Africa_Working_Age_Population * Middle_East_Africa_Mid_Income_Share_Percentage / 100","Middle_East_Africa_Low_Income_Segment = Middle_East_Africa_Working_Age_Population * Middle_East_Africa_Low_Income_Share_Percentage / 100","Indian_Subcontinent_High_Income_Segment = Indian_Subcontinent_Working_Age_Population * Indian_Subcontinent_High_Income_Share_Percentage / 100","Indian_Subcontinent_Mid_Income_Segment = Indian_Subcontinent_Working_Age_Population * Indian_Subcontinent_Mid_Income_Share_Percentage / 100","Indian_Subcontinent_Low_Income_Segment = Indian_Subcontinent_Working_Age_Population * Indian_Subcontinent_Low_Income_Share_Percentage / 100","UK_Europe_High_Income_AI_Adopters = UK_Europe_High_Income_Segment * High_Income_AI_Adoption_Rate","UK_Europe_Mid_Income_AI_Adopters = UK_Europe_Mid_Income_Segment * Mid_Income_AI_Adoption_Rate","UK_Europe_Low_Income_AI_Adopters = UK_Europe_Low_Income_Segment * Low_Income_AI_Adoption_Rate","Middle_East_Africa_High_Income_AI_Adopters = Middle_East_Africa_High_Income_Segment * High_Income_AI_Adoption_Rate","Middle_East_Africa_Mid_Income_AI_Adopters = Middle_East_Africa_Mid_Income_Segment * Mid_Income_AI_Adoption_Rate","Middle_East_Africa_Low_Income_AI_Adopters = Middle_East_Africa_Low_Income_Segment * Low_Income_AI_Adoption_Rate","Indian_Subcontinent_High_Income_AI_Adopters = Indian_Subcontinent_High_Income_Segment * High_Income_AI_Adoption_Rate","Indian_Subcontinent_Mid_Income_AI_Adopters = Indian_Subcontinent_Mid_Income_Segment * Mid_Income_AI_Adoption_Rate","Indian_Subcontinent_Low_Income_AI_Adopters = Indian_Subcontinent_Low_Income_Segment * Low_Income_AI_Adoption_Rate"],"Step 2: Identify the growth rate of the segment":["Total_UK_Europe_High_Income_AI_Adopters = UK_Europe_High_Income_AI_Adopters * (1 + High_Income_Segment_Growth_Rate / 100)","Total_UK_Europe_Mid_Income_AI_Adopters = UK_Europe_Mid_Income_AI_Adopters * (1 + Mid_Income_Segment_Growth_Rate / 100)","Total_UK_Europe_Low_Income_AI_Adopters = UK_Europe_Low_Income_AI_Adopters * (1 + Low_Income_Segment_Growth_Rate / 100)","Total_Middle_East_Africa_High_Income_AI_Adopters = Middle_East_Africa_High_Income_AI_Adopters * (1 + High_Income_Segment_Growth_Rate / 100)","Total_Middle_East_Africa_Mid_Income_AI_Adopters = Middle_East_Africa_Mid_Income_AI_Adopters * (1 + Mid_Income_Segment_Growth_Rate / 100)","Total_Middle_East_Africa_Low_Income_AI_Adopters = Middle_East_Africa_Low_Income_AI_Adopters * (1 + Low_Income_Segment_Growth_Rate / 100)","Total_Indian_Subcontinent_High_Income_AI_Adopters = Indian_Subcontinent_High_Income_AI_Adopters * (1 + High_Income_Segment_Growth_Rate / 100)","Total_Indian_Subcontinent_Mid_Income_AI_Adopters = Indian_Subcontinent_Mid_Income_AI_Adopters * (1 + Mid_Income_Segment_Growth_Rate / 100)","Total_Indian_Subcontinent_Low_Income_AI_Adopters = Indian_Subcontinent_Low_Income_AI_Adopters * (1 + Low_Income_Segment_Growth_Rate / 100)"],"Step 3: Company market share":["UK_Europe_High_Income_Addressable_Market = Total_UK_Europe_High_Income_AI_Adopters * UK_Europe_High_Income_Market_Share / 100","UK_Europe_Mid_Income_Addressable_Market = Total_UK_Europe_Mid_Income_AI_Adopters * UK_Europe_Mid_Income_Market_Share / 100","UK_Europe_Low_Income_Addressable_Market = Total_UK_Europe_Low_Income_AI_Adopters * UK_Europe_Low_Income_Market_Share / 100","Middle_East_Africa_High_Income_Addressable_Market = Total_Middle_East_Africa_High_Income_AI_Adopters * Middle_East_Africa_High_Income_Market_Share / 100","Middle_East_Africa_Mid_Income_Addressable_Market = Total_Middle_East_Africa_Mid_Income_AI_Adopters * Middle_East_Africa_Mid_Income_Market_Share / 100","Middle_East_Africa_Low_Income_Addressable_Market = Total_Middle_East_Africa_Low_Income_AI_Adopters * Middle_East_Africa_Low_Income_Market_Share / 100","Indian_Subcontinent_High_Income_Addressable_Market = Total_Indian_Subcontinent_High_Income_AI_Adopters * Indian_Subcontinent_High_Income_Market_Share / 100","Indian_Subcontinent_Mid_Income_Addressable_Market = Total_Indian_Subcontinent_Mid_Income_AI_Adopters * Indian_Subcontinent_Mid_Income_Market_Share / 100","Indian_Subcontinent_Low_Income_Addressable_Market = Total_Indian_Subcontinent_Low_Income_AI_Adopters * Indian_Subcontinent_Low_Income_Market_Share / 100"],"Step 4: Factor gains and losses of customers from and to competitors":["UK_Europe_High_Income_Churn = UK_Europe_High_Income_Addressable_Market * UK_Europe_High_Income_Churn_per_annum / 100","UK_Europe_Mid_Income_Churn = UK_Europe_Mid_Income_Addressable_Market * UK_Europe_Mid_Income_Churn_per_annum / 100","UK_Europe_Low_Income_Churn = UK_Europe_Low_Income_Addressable_Market * UK_Europe_Low_Income_Churn_per_annum / 100","Middle_East_Africa_High_Income_Churn = Middle_East_Africa_High_Income_Addressable_Market * Middle_East_Africa_High_Income_Churn_per_annum / 100","Middle_East_Africa_Mid_Income_Churn = Middle_East_Africa_Mid_Income_Addressable_Market * Middle_East_Africa_Mid_Income_Churn_per_annum / 100","Middle_East_Africa_Low_Income_Churn = Middle_East_Africa_Low_Income_Addressable_Market * Middle_East_Africa_Low_Income_Churn_per_annum / 100","Indian_Subcontinent_High_Income_Churn = Indian_Subcontinent_High_Income_Addressable_Market * Indian_Subcontinent_High_Income_Churn_per_annum / 100","Indian_Subcontinent_Mid_Income_Churn = Indian_Subcontinent_Mid_Income_Addressable_Market * Indian_Subcontinent_Mid_Income_Churn_per_annum / 100","Indian_Subcontinent_Low_Income_Churn = Indian_Subcontinent_Low_Income_Addressable_Market * Indian_Subcontinent_Low_Income_Churn_per_annum / 100"],"Step 5: Total user base":["UK_Europe_High_Income_Net_Users = UK_Europe_High_Income_Addressable_Market - UK_Europe_High_Income_Churn","UK_Europe_Mid_Income_Net_Users = UK_Europe_Mid_Income_Addressable_Market - UK_Europe_Mid_Income_Churn","UK_Europe_Low_Income_Net_Users = UK_Europe_Low_Income_Addressable_Market - UK_Europe_Low_Income_Churn","Middle_East_Africa_High_Income_Net_Users = Middle_East_Africa_High_Income_Addressable_Market - Middle_East_Africa_High_Income_Churn","Middle_East_Africa_Mid_Income_Net_Users = Middle_East_Africa_Mid_Income_Addressable_Market - Middle_East_Africa_Mid_Income_Churn","Middle_East_Africa_Low_Income_Net_Users = Middle_East_Africa_Low_Income_Addressable_Market - Middle_East_Africa_Low_Income_Churn","Indian_Subcontinent_High_Income_Net_Users = Indian_Subcontinent_High_Income_Addressable_Market - Indian_Subcontinent_High_Income_Churn","Indian_Subcontinent_Mid_Income_Net_Users = Indian_Subcontinent_Mid_Income_Addressable_Market - Indian_Subcontinent_Mid_Income_Churn","Indian_Subcontinent_Low_Income_Net_Users = Indian_Subcontinent_Low_Income_Addressable_Market - Indian_Subcontinent_Low_Income_Churn","Total_User_Base = UK_Europe_High_Income_Net_Users + UK_Europe_Mid_Income_Net_Users + UK_Europe_Low_Income_Net_Users + Middle_East_Africa_High_Income_Net_Users + Middle_East_Africa_Mid_Income_Net_Users + Middle_East_Africa_Low_Income_Net_Users + Indian_Subcontinent_High_Income_Net_Users + Indian_Subcontinent_Mid_Income_Net_Users + Indian_Subcontinent_Low_Income_Net_Users"]},"assumption_values":{"H1 2025":["",20,15,15,30,20,"",90,94,96,65,100,35,100,"",209,31,2,1,3,12,18,22,1,529,15,379,"",2,0.5,"",6,1060337.1,606383.15,55642.96,229418.39,88599.03,11237.95,12372299.6,10166602.55,4749372.71],"H2 2025":["",20,15,15,30,20,"",92,95,97,65,100,35,100,"",219,33,2,1,3,10,16,19,1,559,12,399,"",2,0.5,"",6,1461414.05,908265.5,88612.92,328759.75,138437.33,18095.83,16101111.88,15331335.78,7381414.66]},"units":["","%","%","%","%","%","","%","%","%","%","%","%","%","","USD","USD","month","month","month","%","%","%","month","USD","%","USD","","#","#","","%","#","#","#","#","#","#","#","#","#"],"currency":"USD","steps":["Step 1: Identify user across different product/services","Executive_LLM","Basic_LLM_and_Executive_LLM","Basic_LLM_and_Standard_LLM","Standard_LLM","Basic_LLM","Step 2: Breakdown the user base by plan tenure","yearly_effective_rate","quarterly_effective_rate","halfyearly_effective_rate","Standard_LLM_halfyearly_share","Executive_LLM_halfyearly_share","Standard_LLM_yearly_share","Basic_LLM_quarterly_share","Step 3: Identify the pricing rate for each product/services","Premium_Subscription_halfyearly_price","Base_Subscription_quarterly_price","Standard_LLM_halfyearly_discount_period","Basic_LLM_quarterly_discount_period","Standard_LLM_yearly_discount_period","Basic_LLM_quarterly_discount","Standard_LLM_halfyearly_discount","Standard_LLM_yearly_discount","Executive_LLM_halfyearly_discount_period","Executive_Subscription_halfyearly_price","Executive_LLM_halfyearly_discount","Premium_Subscription_yearly_price","Step 4: Revenue computation for each product tenure plan","quarterly_to_halfyearly_conversion_factor","yearly_to_halfyearly_conversion_factor","Step 5: Total Revenue computation","Additional_Revenue_Contribution","UK Europe High Income Net Users","UK Europe Mid Income Net Users","UK Europe Low Income Net Users","Middle East Africa High Income Net Users","Middle East Africa Mid Income Net Users","Middle East Africa Low Income Net Users","Indian Subcontinent High Income Net Users","Indian Subcontinent Mid Income Net Users","Indian Subcontinent Low Income Net Users"]}''



curl --location 'https://www.py.pitchfit.ai/modeling/fetch_revenue_formula_assumption' \
--header 'accept: application/json' \
--header 'Content-Type: application/json' \
--data '{
    "user_description": "I want to open a competitor for OpenAI which provides 4 LLM subscriptions. I want to build a financial model which tests the feasibility and the overall return of this. i want to structure the model per subscription model, and want to have the model for 5 years straight, starting from 2026 January. I want to operate in both India, Dubai and London",
    "total_user": [
        "UK_Europe_High_Income_Net_Users",
        "UK_Europe_Mid_Income_Net_Users",
        "UK_Europe_Low_Income_Net_Users",
        "Middle_East_Africa_High_Income_Net_Users",
        "Middle_East_Africa_Mid_Income_Net_Users",
        "Middle_East_Africa_Low_Income_Net_Users",
        "Indian_Subcontinent_High_Income_Net_Users",
        "Indian_Subcontinent_Mid_Income_Net_Users",
        "Indian_Subcontinent_Low_Income_Net_Users"
    ],
    "billing": "base subscription is billed quarteyly, premium subscription is billed halfyearly and yearly",
    "additional_revenue": "yes, consider 6% of the total revene obtained from the LLM subscriptions",
    "revenue_sources_splits": [
        "LLM Subscriptions (%)",
        "Other Revenue Streams (%)"
    ],
    "revenue_sources_splits_with_cross_selling": {
        "Base Subscription (%)": 40,
        "Premium Subscription (%)": 30,
        "Executive Subscription (%)": 15,
        "Extramile Subscription (%)": 5,
        "Base and Premium Subscription (%)": 5,
        "Premium and Executive Subscription (%)": 5
    },
    "currency": "usd",
    "interval": "halfyearly",
    "price_key": [
        "Base_Subscription_quarterly_price (usd)",
        "Premium_Subscription_halfyearly_price (usd)",
        "Premium_Subscription_yearly_price (usd)",
        "Executive_Subscription_halfyearly_price (usd)"
    ]
}'


https://us04web.zoom.us/j/4382409227?pwd=VUw4YlZoQXFmSWkrSXgydlRrbkxaZz09
curl --location 'https://www.py.pitchfit.ai/modeling/estimate_user_base_assumption_values' \
--header 'accept: application/json' \
--header 'Content-Type: application/json' \
--data '{
    "formula": {
        "Step 1: Identify the size of the population in scope": [
            "Indian_Subcontinent_Tech_Aware_Population = India_Total_Population * India_AI_Tech_Aware_Population_Share / 100",
            "Middle_East_and_Africa_Tech_Aware_Population = UAE_Total_Population * UAE_AI_Tech_Aware_Population_Share / 100",
            "UK_and_Europe_Tech_Aware_Population = UK_Total_Population * UK_AI_Tech_Aware_Population_Share / 100",
            "Indian_Subcontinent_High_Income_LLM_Users = Indian_Subcontinent_Tech_Aware_Population * High_Income_Share_India / 100 * High_Income_LLM_Adoption_Rate / 100",
            "Indian_Subcontinent_Mid_Income_LLM_Users = Indian_Subcontinent_Tech_Aware_Population * Mid_Income_Share_India / 100 * Mid_Income_LLM_Adoption_Rate / 100",
            "Indian_Subcontinent_Low_Income_LLM_Users = Indian_Subcontinent_Tech_Aware_Population * Low_Income_Share_India / 100 * Low_Income_LLM_Adoption_Rate / 100",
            "Middle_East_and_Africa_High_Income_LLM_Users = Middle_East_and_Africa_Tech_Aware_Population * High_Income_Share_UAE / 100 * High_Income_LLM_Adoption_Rate / 100",
            "Middle_East_and_Africa_Mid_Income_LLM_Users = Middle_East_and_Africa_Tech_Aware_Population * Mid_Income_Share_UAE / 100 * Mid_Income_LLM_Adoption_Rate / 100",
            "Middle_East_and_Africa_Low_Income_LLM_Users = Middle_East_and_Africa_Tech_Aware_Population * Low_Income_Share_UAE / 100 * Low_Income_LLM_Adoption_Rate / 100",
            "UK_and_Europe_High_Income_LLM_Users = UK_and_Europe_Tech_Aware_Population * High_Income_Share_UK / 100 * High_Income_LLM_Adoption_Rate / 100",
            "UK_and_Europe_Mid_Income_LLM_Users = UK_and_Europe_Tech_Aware_Population * Mid_Income_Share_UK / 100 * Mid_Income_LLM_Adoption_Rate / 100",
            "UK_and_Europe_Low_Income_LLM_Users = UK_and_Europe_Tech_Aware_Population * Low_Income_Share_UK / 100 * Low_Income_LLM_Adoption_Rate / 100"
        ],
        "Step 2: Identify the growth rate of the segment": [
            "Total_Indian_Subcontinent_High_Income_LLM_Users = Indian_Subcontinent_High_Income_LLM_Users * (1 + Indian_Subcontinent_Population_Growth_Rate / 100)",
            "Total_Indian_Subcontinent_Mid_Income_LLM_Users = Indian_Subcontinent_Mid_Income_LLM_Users * (1 + Indian_Subcontinent_Population_Growth_Rate / 100)",
            "Total_Indian_Subcontinent_Low_Income_LLM_Users = Indian_Subcontinent_Low_Income_LLM_Users * (1 + Indian_Subcontinent_Population_Growth_Rate / 100)",
            "Total_Middle_East_and_Africa_High_Income_LLM_Users = Middle_East_and_Africa_High_Income_LLM_Users * (1 + Middle_East_and_Africa_Population_Growth_Rate / 100)",
            "Total_Middle_East_and_Africa_Mid_Income_LLM_Users = Middle_East_and_Africa_Mid_Income_LLM_Users * (1 + Middle_East_and_Africa_Population_Growth_Rate / 100)",
            "Total_Middle_East_and_Africa_Low_Income_LLM_Users = Middle_East_and_Africa_Low_Income_LLM_Users * (1 + Middle_East_and_Africa_Population_Growth_Rate / 100)",
            "Total_UK_and_Europe_High_Income_LLM_Users = UK_and_Europe_High_Income_LLM_Users * (1 + UK_and_Europe_Population_Growth_Rate / 100)",
            "Total_UK_and_Europe_Mid_Income_LLM_Users = UK_and_Europe_Mid_Income_LLM_Users * (1 + UK_and_Europe_Population_Growth_Rate / 100)",
            "Total_UK_and_Europe_Low_Income_LLM_Users = UK_and_Europe_Low_Income_LLM_Users * (1 + UK_and_Europe_Population_Growth_Rate / 100)"
        ],
        "Step 3: Company market share": [
            "Indian_Subcontinent_High_Income_Addressable_Market = Total_Indian_Subcontinent_High_Income_LLM_Users * Indian_Subcontinent_High_Income_Market_Share / 100",
            "Indian_Subcontinent_Mid_Income_Addressable_Market = Total_Indian_Subcontinent_Mid_Income_LLM_Users * Indian_Subcontinent_Mid_Income_Market_Share / 100",
            "Indian_Subcontinent_Low_Income_Addressable_Market = Total_Indian_Subcontinent_Low_Income_LLM_Users * Indian_Subcontinent_Low_Income_Market_Share / 100",
            "Middle_East_and_Africa_High_Income_Addressable_Market = Total_Middle_East_and_Africa_High_Income_LLM_Users * Middle_East_and_Africa_High_Income_Market_Share / 100",
            "Middle_East_and_Africa_Mid_Income_Addressable_Market = Total_Middle_East_and_Africa_Mid_Income_LLM_Users * Middle_East_and_Africa_Mid_Income_Market_Share / 100",
            "Middle_East_and_Africa_Low_Income_Addressable_Market = Total_Middle_East_and_Africa_Low_Income_LLM_Users * Middle_East_and_Africa_Low_Income_Market_Share / 100",
            "UK_and_Europe_High_Income_Addressable_Market = Total_UK_and_Europe_High_Income_LLM_Users * UK_and_Europe_High_Income_Market_Share / 100",
            "UK_and_Europe_Mid_Income_Addressable_Market = Total_UK_and_Europe_Mid_Income_LLM_Users * UK_and_Europe_Mid_Income_Market_Share / 100",
            "UK_and_Europe_Low_Income_Addressable_Market = Total_UK_and_Europe_Low_Income_LLM_Users * UK_and_Europe_Low_Income_Market_Share / 100"
        ],
        "Step 4: Factor gains and losses of customers from and to competitors": [
            "Indian_Subcontinent_High_Income_Churn = Indian_Subcontinent_High_Income_Addressable_Market * Indian_Subcontinent_High_Income_Churn_per_annum / 100",
            "Indian_Subcontinent_Mid_Income_Churn = Indian_Subcontinent_Mid_Income_Addressable_Market * Indian_Subcontinent_Mid_Income_Churn_per_annum / 100",
            "Indian_Subcontinent_Low_Income_Churn = Indian_Subcontinent_Low_Income_Addressable_Market * Indian_Subcontinent_Low_Income_Churn_per_annum / 100",
            "Middle_East_and_Africa_High_Income_Churn = Middle_East_and_Africa_High_Income_Addressable_Market * Middle_East_and_Africa_High_Income_Churn_per_annum / 100",
            "Middle_East_and_Africa_Mid_Income_Churn = Middle_East_and_Africa_Mid_Income_Addressable_Market * Middle_East_and_Africa_Mid_Income_Churn_per_annum / 100",
            "Middle_East_and_Africa_Low_Income_Churn = Middle_East_and_Africa_Low_Income_Addressable_Market * Middle_East_and_Africa_Low_Income_Churn_per_annum / 100",
            "UK_and_Europe_High_Income_Churn = UK_and_Europe_High_Income_Addressable_Market * UK_and_Europe_High_Income_Churn_per_annum / 100",
            "UK_and_Europe_Mid_Income_Churn = UK_and_Europe_Mid_Income_Addressable_Market * UK_and_Europe_Mid_Income_Churn_per_annum / 100",
            "UK_and_Europe_Low_Income_Churn = UK_and_Europe_Low_Income_Addressable_Market * UK_and_Europe_Low_Income_Churn_per_annum / 100"
        ],
        "Step 5: Total user base": [
            "Indian_Subcontinent_High_Income_Net_Users = Indian_Subcontinent_High_Income_Addressable_Market - Indian_Subcontinent_High_Income_Churn",
            "Indian_Subcontinent_Mid_Income_Net_Users = Indian_Subcontinent_Mid_Income_Addressable_Market - Indian_Subcontinent_Mid_Income_Churn",
            "Indian_Subcontinent_Low_Income_Net_Users = Indian_Subcontinent_Low_Income_Addressable_Market - Indian_Subcontinent_Low_Income_Churn",
            "Middle_East_and_Africa_High_Income_Net_Users = Middle_East_and_Africa_High_Income_Addressable_Market - Middle_East_and_Africa_High_Income_Churn",
            "Middle_East_and_Africa_Mid_Income_Net_Users = Middle_East_and_Africa_Mid_Income_Addressable_Market - Middle_East_and_Africa_Mid_Income_Churn",
            "Middle_East_and_Africa_Low_Income_Net_Users = Middle_East_and_Africa_Low_Income_Addressable_Market - Middle_East_and_Africa_Low_Income_Churn",
            "UK_and_Europe_High_Income_Net_Users = UK_and_Europe_High_Income_Addressable_Market - UK_and_Europe_High_Income_Churn",
            "UK_and_Europe_Mid_Income_Net_Users = UK_and_Europe_Mid_Income_Addressable_Market - UK_and_Europe_Mid_Income_Churn",
            "UK_and_Europe_Low_Income_Net_Users = UK_and_Europe_Low_Income_Addressable_Market - UK_and_Europe_Low_Income_Churn",
            "Total_user_base = Indian_Subcontinent_High_Income_Net_Users + Indian_Subcontinent_Mid_Income_Net_Users + Indian_Subcontinent_Low_Income_Net_Users + Middle_East_and_Africa_High_Income_Net_Users + Middle_East_and_Africa_Mid_Income_Net_Users + Middle_East_and_Africa_Low_Income_Net_Users + UK_and_Europe_High_Income_Net_Users + UK_and_Europe_Mid_Income_Net_Users + UK_and_Europe_Low_Income_Net_Users"
        ]
    },
    "assumptions": {
        "India_Total_Population": 1420000000,
        "UAE_Total_Population": 10000000,
        "UK_Total_Population": 67000000,
        "India_AI_Tech_Aware_Population_Share": 15,
        "UAE_AI_Tech_Aware_Population_Share": 35,
        "UK_AI_Tech_Aware_Population_Share": 45,
        "High_Income_Share_India": 10,
        "Mid_Income_Share_India": 25,
        "Low_Income_Share_India": 65,
        "High_Income_Share_UAE": 40,
        "Mid_Income_Share_UAE": 45,
        "Low_Income_Share_UAE": 15,
        "High_Income_Share_UK": 30,
        "Mid_Income_Share_UK": 50,
        "Low_Income_Share_UK": 20,
        "High_Income_LLM_Adoption_Rate": 25,
        "Mid_Income_LLM_Adoption_Rate": 12,
        "Low_Income_LLM_Adoption_Rate": 3,
        "Indian_Subcontinent_Population_Growth_Rate": 2.5,
        "Middle_East_and_Africa_Population_Growth_Rate": 2.8,
        "UK_and_Europe_Population_Growth_Rate": 2.2,
        "Indian_Subcontinent_High_Income_Market_Share": 8,
        "Indian_Subcontinent_Mid_Income_Market_Share": 12,
        "Indian_Subcontinent_Low_Income_Market_Share": 15,
        "Middle_East_and_Africa_High_Income_Market_Share": 6,
        "Middle_East_and_Africa_Mid_Income_Market_Share": 10,
        "Middle_East_and_Africa_Low_Income_Market_Share": 18,
        "UK_and_Europe_High_Income_Market_Share": 5,
        "UK_and_Europe_Mid_Income_Market_Share": 8,
        "UK_and_Europe_Low_Income_Market_Share": 12,
        "Indian_Subcontinent_High_Income_Churn_per_annum": 15,
        "Indian_Subcontinent_Mid_Income_Churn_per_annum": 12,
        "Indian_Subcontinent_Low_Income_Churn_per_annum": 20,
        "Middle_East_and_Africa_High_Income_Churn_per_annum": 10,
        "Middle_East_and_Africa_Mid_Income_Churn_per_annum": 8,
        "Middle_East_and_Africa_Low_Income_Churn_per_annum": 18,
        "UK_and_Europe_High_Income_Churn_per_annum": 8,
        "UK_and_Europe_Mid_Income_Churn_per_annum": 6,
        "UK_and_Europe_Low_Income_Churn_per_annum": 12
    },
    "analysis_time_frame": [
        "H1 2025",
        "H2 2025"
    ],
    "period_ranges": [
        [
            "january",
            "June",
            2025
        ],
        [
            "July",
            "december",
            2025
        ]
    ],
    "user_description": "I want to open a competitor for OpenAI which provides 4 LLM subscriptions. I want to build a financial model which tests the feasibility and the overall return of this. i want to structure the model per subscription model, and want to have the model for 5 years straight, starting from 2026 January. I want to operate in both India, Dubai and London"
}'
